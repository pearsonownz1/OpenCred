// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Student {
  id                 String               @id @default(uuid())
  name               String
  email              String               @unique
  evaluationRequests EvaluationRequest[]
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
}

model Document {
  id                  String             @id @default(uuid())
  filename            String
  originalName        String
  path                String
  type                DocumentType? @default(OTHER)
  mimetype            String
  size                Int
  parsedData          Json?
  evaluationRequestId String?
  evaluationRequest   EvaluationRequest? @relation(fields: [evaluationRequestId], references: [id])
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
}

model EvaluationRequest {
  id             String            @id @default(uuid())
  student        Student           @relation(fields: [studentId], references: [id])
  studentId      String
  documents      Document[]
  status         RequestStatus
  submittedAt    DateTime          @default(now())
  evaluationType String
  institution    String
  country        CountryRules      @relation(fields: [countryCode], references: [country])
  countryCode    String
  program        String
  result         EvaluationResult?
  revisions      Revision[]
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
}

model EvaluationResult {
  id             String            @id @default(uuid())
  request        EvaluationRequest @relation(fields: [requestId], references: [id])
  requestId      String            @unique
  aiAnalysis     Json
  humanReview    Json?
  finalResult    Json?
  reviewedBy     String?
  reviewedAt     DateTime?
  reviewNotes    String?
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
}

model CountryRules {
  id                 String              @id @default(uuid())
  country            String              @unique
  rules              String
  evaluationRequests EvaluationRequest[]
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
}

model Revision {
  id                  String            @id @default(uuid())
  evaluationRequest   EvaluationRequest @relation(fields: [evaluationRequestId], references: [id])
  evaluationRequestId String
  requestedBy         String
  requestedAt         DateTime          @default(now())
  description         String
  status              RevisionStatus    @default(PENDING)
  completedAt         DateTime?
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
}

enum RequestStatus {
  SUBMITTED
  AI_PROCESSING
  HUMAN_REVIEW
  COMPLETED
  ERROR
}

enum DocumentType {
  TRANSCRIPT
  DIPLOMA
  IDENTIFICATION
  OTHER
}

enum RevisionStatus {
  PENDING
  COMPLETED
  REJECTED
}
